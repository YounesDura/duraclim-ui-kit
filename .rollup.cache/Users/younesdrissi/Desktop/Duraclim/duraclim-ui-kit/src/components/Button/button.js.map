{"version":3,"file":"button.js","sourceRoot":"","sources":["button.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AACvC,OAAO,MAAM,MAAM,sBAAsB,CAAC;AAqB1C,IAAM,MAAM,GAAG,UAAC,EAQF;IAPZ,IAAA,eAAmB,EAAnB,OAAO,mBAAG,SAAS,KAAA,EACnB,IAAI,UAAA,EACJ,IAAI,UAAA,EACJ,eAAe,qBAAA,EACf,OAAO,aAAA,EACP,SAAS,eAAA,EACN,KAAK,cAPM,sEAQf,CADS;IAER,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAM,UAAU,GAAG,OAAO,CAAC;QACzB,OAAA,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;IAA/C,CAA+C,EAC/C,CAAC,OAAO,CAAC,CACV,CAAC;IAEF,IAAM,eAAe,GAAG,OAAO,CAAC;QAC9B,OAAA,UAAG,MAAM,CAAC,MAAM,cAAI,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,cAAI,SAAS,IAAI,EAAE,CAAE,CAAC,IAAI,EAAE;IAArE,CAAqE,EACrE,CAAC,OAAO,EAAE,SAAS,CAAC,CACrB,CAAC;IAEF,IAAM,aAAa,GAAG;QACpB,IAAI,UAAU,EAAE,CAAC;YACf,OAAO,CACL,eAAK,SAAS,EAAE,MAAM,CAAC,eAAe,aACnC,IAAI,IAAI,eAAM,SAAS,EAAE,MAAM,CAAC,IAAI,YAAG,IAAI,GAAQ,EACnD,IAAI,IAAI,eAAM,SAAS,EAAE,MAAM,CAAC,IAAI,YAAG,IAAI,GAAQ,EACpD,eAAM,SAAS,EAAE,MAAM,CAAC,KAAK,uBAAU,IACnC,CACP,CAAC;QACJ,CAAC;QAED,OAAO,CACL,8BACG,IAAI,IAAI,eAAM,SAAS,EAAE,MAAM,CAAC,IAAI,YAAG,IAAI,GAAQ,EACnD,IAAI,IAAI,eAAM,SAAS,EAAE,MAAM,CAAC,IAAI,YAAG,IAAI,GAAQ,IACnD,CACJ,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,CACL,2BACE,IAAI,EAAC,QAAQ,EACb,SAAS,EAAE,eAAe,EAC1B,OAAO,EAAE,OAAO,KAAK,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EACvD,QAAQ,EAAE,OAAO,KAAK,YAAY,IAC9B,KAAK,eAER,aAAa,EAAE,EACf,UAAU,IAAI,eAAe,IAAI,CAChC,aAAI,SAAS,EAAE,MAAM,CAAC,YAAY,YAC/B,eAAe,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK,IAAK,OAAA,CACtC,aAAqC,OAAO,EAAE,MAAM,CAAC,OAAO,YACzD,MAAM,CAAC,KAAK,IADN,0BAAmB,KAAK,CAAE,CAE9B,CACN,EAJuC,CAIvC,CAAC,GACC,CACN,KACM,CACV,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import React, { useMemo } from 'react';\nimport styles from './button.module.scss';\n\ntype ButtonVariant = \n  | 'primary' \n  | 'success' \n  | 'cancel' \n  | 'ghost' \n  | 'dropdown' \n  | 'dropdownGhost' \n  | 'deactivate';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  text?: string;\n  icon?: string;\n  dropdownOptions?: Array<{\n    label: string;\n    onClick: () => void;\n  }>;\n}\n\nconst Button = ({\n  variant = 'primary',\n  text,\n  icon,\n  dropdownOptions,\n  onClick,\n  className,\n  ...props\n}: ButtonProps) => {\n  if (!text && !icon) {\n    console.warn('Button should have either text or icon');\n    return null;\n  }\n\n  const isDropdown = useMemo(() => \n    ['dropdown', 'dropdownGhost'].includes(variant), \n    [variant]\n  );\n\n  const combinedClasses = useMemo(() => \n    `${styles.button} ${styles[variant] || ''} ${className || ''}`.trim(),\n    [variant, className]\n  );\n\n  const renderContent = () => {\n    if (isDropdown) {\n      return (\n        <div className={styles.dropdownContent}>\n          {icon && <span className={styles.icon}>{icon}</span>}\n          {text && <span className={styles.text}>{text}</span>}\n          <span className={styles.arrow}>â–¼</span>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        {icon && <span className={styles.icon}>{icon}</span>}\n        {text && <span className={styles.text}>{text}</span>}\n      </>\n    );\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={combinedClasses}\n      onClick={variant !== 'deactivate' ? onClick : undefined}\n      disabled={variant === 'deactivate'}\n      {...props}\n    >\n      {renderContent()}\n      {isDropdown && dropdownOptions && (\n        <ul className={styles.dropdownMenu}>\n          {dropdownOptions.map((option, index) => (\n            <li key={`dropdown-option-${index}`} onClick={option.onClick}>\n              {option.label}\n            </li>\n          ))}\n        </ul>\n      )}\n    </button>\n  );\n};\n\nexport default Button;"]}