{"version":3,"file":"Inputs.js","sourceRoot":"","sources":["Inputs.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, ReactNode } from 'react';\nimport styles from './Inputs.module.scss';\n\ntype InputType = 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search' | 'date';\n\ninterface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement | HTMLSelectElement>, 'type'> {\n  type?: InputType;\n  placeholder?: string;\n  icon?: ReactNode;\n  options?: string[]; \n  value?: string;\n  onChange?: (value: string, isValid: boolean) => void;\n  customValidation?: (value: string) => boolean;\n}\n\nconst Input = ({\n  type = 'text',\n  placeholder,\n  icon,\n  options,\n  value = '',\n  onChange,\n  customValidation,\n  className,\n  ...props\n}: InputProps) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [isValid, setIsValid] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const validateInput = (value: string): boolean => {\n    if (!value) return true;\n\n    let isValidValue = true;\n    let message = '';\n\n    switch (type) {\n      case 'email':\n        isValidValue = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n        message = 'Please enter a valid email address';\n        break;\n      case 'tel':\n        isValidValue = /^[\\d\\s+()-]{10,}$/.test(value);\n        message = 'Please enter a valid phone number';\n        break;\n      case 'number':\n        isValidValue = !isNaN(Number(value));\n        message = 'Please enter a valid number';\n        break;\n      case 'url':\n        isValidValue = /^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([/\\w .-]*)*\\/?$/.test(value);\n        message = 'Please enter a valid URL';\n        break;\n      case 'date':\n        isValidValue = !isNaN(Date.parse(value));\n        message = 'Please enter a valid date';\n        break;\n    }\n\n    if (customValidation) {\n      isValidValue = isValidValue && customValidation(value);\n      message = 'Invalid input';\n    }\n\n    setErrorMessage(isValidValue ? '' : message);\n    return isValidValue;\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const newValue = e.target.value;\n    const isValidValue = validateInput(newValue);\n    setIsValid(isValidValue);\n    onChange?.(newValue, isValidValue);\n  };\n\n  const handleFocus = () => setIsFocused(true);\n  const handleBlur = () => setIsFocused(false);\n\n  const combinedClasses = `\n    ${styles.inputWrapper} \n    ${isFocused ? styles.focused : ''} \n    ${!isValid ? styles.error : ''} \n    ${className || ''}\n  `.trim();\n\n  return (\n    <div className={combinedClasses}>\n      {options ? (\n        <select\n          className={styles.input}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          value={value}\n          onChange={handleChange}\n          {...props}\n        >\n          <option value=\"\" disabled hidden>\n            {placeholder}\n          </option>\n          {options.map((opt, index) => (\n            <option key={`option-${opt}-${index}`} value={opt}>\n              {opt}\n            </option>\n          ))}\n        </select>\n      ) : (\n        <input\n          type={type}\n          className={styles.input}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          {...props}\n        />\n      )}\n      {icon && <div className={styles.icon}>{icon}</div>}\n      {!isValid && errorMessage && (\n        <div className={styles.errorMessage}>{errorMessage}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Input;"]}